import java.awt.Point;

/**
 * SudokuSolver.
 *
 * TODO 4: FIll in your names and student IDs:
 *
 * Luca Bosch
 * 2201178
 * Sylvi Deng
 * 2252953
 */
public class SudokuSolver {
    private SudokuGrid grid;

    public SudokuSolver(SudokuGrid grid) {
        this.grid = grid;
        int[][] initial = {
            {0,6,0, 0,0,1, 0,9,4},
            {3,0,0, 0,0,7, 1,0,0},
            {0,0,0, 0,9,0, 0,0,0},

            {7,0,6, 5,0,0, 2,0,9},
            {0,3,0, 0,2,0, 0,6,0},
            {9,0,2, 0,0,6, 3,0,1},

            {0,0,0, 0,5,0, 0,0,0},
            {0,0,7, 3,0,0, 0,0,2},
            {4,1,0, 7,0,0, 0,8,0}
        };
        for (int r = 0; r < SudokuGrid.SIZE; r++) {
            for (int c = 0; c < SudokuGrid.SIZE; c++) {
                grid.fillCell(r, c, initial[r][c]);
            }
        }
    }

    /**
     * Solves the Sudoku puzzle using recursion with backtracking.
     *
     * @return true if a solution was found, false otherwise
     */
    public boolean solve() {
        Point empty = grid.findEmptyCell();
        if (empty == null) {
            return true;
        }
        int row = empty.x;
        int col = empty.y;
        for (int digit = SudokuGrid.MIN_DIGIT; digit <= SudokuGrid.MAX_DIGIT; digit++) {
            if (!grid.givesConflict(row, col, digit)) {
                grid.fillCell(row, col, digit);
                if (solve()) {
                    return true;
                }
                grid.fillCell(row, col, 0);
            }
        }
        return false;
    }
    
    /**
     * Invokes the solver and prints the resulting grid or a failure message.
     */
    public void solveIt() {
        if (solve()) {
            grid.print();
        } else {
            System.out.println("No solution");
        }
    }

    public static void main(String[] args) {
        SudokuGrid grid = new SudokuGrid();
        SudokuSolver solver = new SudokuSolver(grid);
        solver.solveIt();
    }
}
